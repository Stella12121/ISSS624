---
title: "In-class Exercise 1: My First Date with Geospatial Data Analytics"
author: "Zhang Cunlei"
date: "18 Nov 2023"
date-modified: "last-modefied"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---

## **1 Getting Started**

We will first load the necessary packages using the following code chunk:

-   **tmap**: for thematic mapping

-   **sf**: for geospatial data handling

-   **tidyverse**: for non-spatial data handling

```{r}
pacman::p_load(tmap, sf, tidyverse)
```

## **2 Preparing the Data**

### **2.1 Importing the Origin Destination (OD) data**

We will import the `Passenger Volume by Origin Destination Bus Stops` data set downloaded from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html "LTA DataMall") by using `read_csv()` of **readr** package, which is part of **tidyverse** package.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

Then, use `glimpse()` to take a look at the data:

```{r}
glimpse(odbus)
```

From the above, we see that **ORIGIN_PT_CODE** and **DESTINATION_PT_CODE** are character data type. We should convert these two columns from characters into factors because these two columns contains the bus stop numbers and we will need these bus stop numbers to get the bus stop locations in subsequent steps. We will use `as.factor()` to convert the data from character to factor.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

### **2.2 Extracting the Study Data**

We will extract the study data using `filter()`, `group_by()` and `summarise()` to get our study data (i.e., weekday trips that start from 7am and end before 10am).

```{r}
origintrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

## **3 Working with Geospatial Data**

We will use `st_read()` from **sf** package to read the geospatial data and use `st_transform()` from **sf** package to project the data into **svy21** using its ESPG code 3414.

```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

Let us take a look at the data:

```{r}
busstop
```

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

Let us take a look at the imported data:

```{r}
mpsz
```
